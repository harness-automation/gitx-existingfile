pipeline:
  name: scriptExpressionTest
  identifier: scriptExpressionTest
  description: ''
  tags: {
    }
  stages:
  - stage:
      name: s1
      identifier: s1
      description: ''
      type: Deployment
      spec:
        serviceConfig:
          serviceDefinition:
            spec:
              artifacts:
                sidecars: [
                  ]
              manifests: [
                ]
            type: Kubernetes
          service:
            name: service12
            identifier: service12
        infrastructure:
          infrastructureDefinition:
            type: KubernetesDirect
            spec:
              connectorRef: org.KubernetesConnectorForAutomationTest
              namespace: default
              releaseName: releasename-172102
          environment:
            name: env12
            identifier: env12
            type: PreProduction
          allowSimultaneousDeployments: true
        execution:
          steps:
          - step:
              type: ShellScript
              name: testExpression
              identifier: testExpression
              when:
                stageStatus: Success
                condition: '"aa" != "bb"'
              timeout: 10m
              spec:
                shell: Bash
                onDelegate: true
                source:
                  type: Inline
                  spec:
                    script: "set -e\nassert() {\n if [ \"$1\" !=  \"$2\" ]; then\n\
                      \   echo \"Expression Assertion Failed: $1\"\n    exit 1\n fi\n\
                      }\n\nassertEither() {\n  if [ \"$1\" ==  \"$2\" ] || [ \"$1\"\
                      \ ==  \"$3\" ] || [ \"$1\" ==  \"$4\" ] || [ \"$1\" ==  \"$5\"\
                      \ ] || [ \"$1\" ==  \"$6\" ] || [ \"$1\" == \"$7\" ] || [ \"\
                      $1\" == \"$8\" ] || [ \"$1\" == \"$9\" ] || [ \"$1\" == \"$10\"\
                      \ ] ; then\n    echo \"Expression Matched: $1\"\n  elif [ \"\
                      $1\" == \"test@harness.io\" ] ; then\n    echo \"Expression\
                      \ Matched: $1 to be test@harness.io\"\n  elif [ \"$1\" == \"\
                      John Smith\" ] ; then\n    echo \"Expression Matched: $1 to\
                      \ be John Smith\"\n  elif [ \"$1\" == \"pmsuat@harnessioprivate.testinator.com\"\
                      \ ] ; then\n    echo \"Expression Matched: $1 to be pmsuat@harnessioprivate.testinator.com\"\
                      \n  elif [ \"$1\" == \"pmsuat\" ] ; then\n    echo \"Expression\
                      \ Matched: $1 to be pmsuat\"\n  elif [ \"$1\" == \"admin_pipeline@harnessioprivate.testinator.com\"\
                      \ ] ; then\n    echo \"Expression Matched: $1 to be admin_pipeline@harnessioprivate.testinator.com\"\
                      \n  elif [ \"$1\" == \"pipeline\" ] ; then\n    echo \"Expression\
                      \ Matched: $1 to be pipeline\"     \n  else\n    echo \"Expression\
                      \ Assertion Failed: $1\"\n    exit 1\n  fi\n}\necho <+pipeline.triggeredBy.email>\n\
                      echo <+pipeline.triggeredBy.name>\nassert <+pipeline.triggerType>\
                      \ \"MANUAL\"\nassertEither \"<+pipeline.triggeredBy.email>\"\
                      \ \"admin@harness.io\" \"autocdpng@mailinator.com\" \"automationpipelinesng@mailinator.com\"\
                      \ \"prodsanitytest@mailinator.com\" \"prod2sanitytest@mailinator.com\"\
                      \ \"harnesspie@gmail.com\" \"pmsprod1@harnessioprivate.testinator.com\"\
                      \ \"pmsprod3@harnessioprivate.testinator.com\" \"pmsuat@harnessioprivate.testinator.com\"\
                      \ \"admin_pipeline@harnessioprivate.testinator.com\"\nassertEither\
                      \ \"<+pipeline.triggeredBy.name>\" \"admin user\" \"autocdpng\"\
                      \ \"automationPipelinesNg automation\" \"prod sanity\" \"prod2\
                      \ sanity\" \"HarnessProd\" \"pmsprod1\" \"pmsprod3\" \"pmsuat\"\
                      \ \"pipeline\""
                environmentVariables:
                - name: envVar
                  type: String
                  value: env
                outputVariables:
                - name: outVar
                  type: String
                  value: out
          rollbackSteps: [
            ]
      tags: {
        }
      failureStrategies:
      - onFailure:
          errors:
          - AllErrors
          action:
            type: StageRollback
  orgIdentifier: Simlified_Git_sync
  projectIdentifier: SimplifiedGitSync_Do_Not_Delete
